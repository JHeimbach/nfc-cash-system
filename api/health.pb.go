// Code generated by protoc-gen-go. DO NOT EDIT.
// source: health.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HealthStatus struct {
	Running              bool     `protobuf:"varint,1,opt,name=running,proto3" json:"running,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthStatus) Reset()         { *m = HealthStatus{} }
func (m *HealthStatus) String() string { return proto.CompactTextString(m) }
func (*HealthStatus) ProtoMessage()    {}
func (*HealthStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdbebe66dda7cb29, []int{0}
}

func (m *HealthStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthStatus.Unmarshal(m, b)
}
func (m *HealthStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthStatus.Marshal(b, m, deterministic)
}
func (m *HealthStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthStatus.Merge(m, src)
}
func (m *HealthStatus) XXX_Size() int {
	return xxx_messageInfo_HealthStatus.Size(m)
}
func (m *HealthStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthStatus.DiscardUnknown(m)
}

var xxx_messageInfo_HealthStatus proto.InternalMessageInfo

func (m *HealthStatus) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

func init() {
	proto.RegisterType((*HealthStatus)(nil), "api.HealthStatus")
}

func init() { proto.RegisterFile("health.proto", fileDescriptor_fdbebe66dda7cb29) }

var fileDescriptor_fdbebe66dda7cb29 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0xb1, 0x4a, 0x43, 0x31,
	0x14, 0x40, 0x79, 0x0a, 0x55, 0xc2, 0x73, 0x30, 0x83, 0x94, 0xa7, 0x43, 0xe8, 0x54, 0xa4, 0x4d,
	0x50, 0x57, 0x17, 0x07, 0xc1, 0xd5, 0xfa, 0x05, 0xe9, 0xe3, 0x36, 0x2f, 0x58, 0x6f, 0x42, 0x72,
	0xf3, 0xc4, 0xd5, 0xc1, 0x0f, 0xd0, 0xc5, 0xff, 0xf2, 0x17, 0xfc, 0x10, 0x31, 0x49, 0x41, 0x70,
	0x0a, 0xb9, 0xf7, 0x84, 0x73, 0xc2, 0xda, 0x01, 0xf4, 0x96, 0x06, 0xe9, 0x83, 0x23, 0xc7, 0xf7,
	0xb5, 0xb7, 0xdd, 0xa9, 0x71, 0xce, 0x6c, 0x41, 0xe5, 0xd1, 0x3a, 0x6d, 0x14, 0x3c, 0x79, 0x7a,
	0x29, 0x44, 0x77, 0x56, 0x97, 0xda, 0x5b, 0xa5, 0x11, 0x1d, 0x69, 0xb2, 0x0e, 0x63, 0xdd, 0x2e,
	0xf2, 0xd1, 0x2f, 0x0d, 0xe0, 0x32, 0x3e, 0x6b, 0x63, 0x20, 0x28, 0xe7, 0x33, 0xf1, 0x9f, 0x9e,
	0xcd, 0x59, 0x7b, 0x97, 0xed, 0x0f, 0xa4, 0x29, 0x45, 0x3e, 0x65, 0x07, 0x21, 0x21, 0x5a, 0x34,
	0xd3, 0x46, 0x34, 0xf3, 0xc3, 0xd5, 0xee, 0x7a, 0xf9, 0xd9, 0xb0, 0xa3, 0x8a, 0x42, 0x18, 0x6d,
	0x0f, 0xfc, 0xad, 0x61, 0x93, 0x32, 0xe1, 0x27, 0xb2, 0x34, 0xc9, 0x5d, 0xb0, 0xbc, 0xfd, 0x0d,
	0xee, 0x8e, 0xa5, 0xf6, 0x56, 0xfe, 0x35, 0xcc, 0xee, 0xdf, 0x6f, 0xae, 0xbb, 0xc5, 0x0a, 0x28,
	0x05, 0x8c, 0xa2, 0x7c, 0x5d, 0x04, 0x88, 0xde, 0x61, 0x04, 0x61, 0x37, 0x22, 0x42, 0x18, 0x21,
	0x08, 0x1b, 0x45, 0x55, 0x9f, 0xd7, 0x44, 0xd1, 0x0f, 0xd0, 0x3f, 0xbe, 0x7e, 0x7d, 0x7f, 0xec,
	0xb5, 0x9c, 0xa9, 0xf1, 0x42, 0x95, 0xd7, 0xeb, 0x49, 0xb6, 0x5e, 0xfd, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xf9, 0x0f, 0x36, 0x2a, 0x49, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HealthServiceClient is the client API for HealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthServiceClient interface {
	Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HealthStatus, error)
}

type healthServiceClient struct {
	cc *grpc.ClientConn
}

func NewHealthServiceClient(cc *grpc.ClientConn) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HealthStatus, error) {
	out := new(HealthStatus)
	err := c.cc.Invoke(ctx, "/api.HealthService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServiceServer is the server API for HealthService service.
type HealthServiceServer interface {
	Health(context.Context, *empty.Empty) (*HealthStatus, error)
}

// UnimplementedHealthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHealthServiceServer struct {
}

func (*UnimplementedHealthServiceServer) Health(ctx context.Context, req *empty.Empty) (*HealthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}

func RegisterHealthServiceServer(s *grpc.Server, srv HealthServiceServer) {
	s.RegisterService(&_HealthService_serviceDesc, srv)
}

func _HealthService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.HealthService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).Health(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _HealthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _HealthService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "health.proto",
}
