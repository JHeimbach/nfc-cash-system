// Code generated by protoc-gen-go. DO NOT EDIT.
// source: globals.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61bc6eb45b21f34, []int{0}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Paging struct {
	Limit                int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Paging) Reset()         { *m = Paging{} }
func (m *Paging) String() string { return proto.CompactTextString(m) }
func (*Paging) ProtoMessage()    {}
func (*Paging) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61bc6eb45b21f34, []int{1}
}

func (m *Paging) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Paging.Unmarshal(m, b)
}
func (m *Paging) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Paging.Marshal(b, m, deterministic)
}
func (m *Paging) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Paging.Merge(m, src)
}
func (m *Paging) XXX_Size() int {
	return xxx_messageInfo_Paging.Size(m)
}
func (m *Paging) XXX_DiscardUnknown() {
	xxx_messageInfo_Paging.DiscardUnknown(m)
}

var xxx_messageInfo_Paging proto.InternalMessageInfo

func (m *Paging) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Paging) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func init() {
	proto.RegisterType((*Status)(nil), "api.Status")
	proto.RegisterType((*Paging)(nil), "api.Paging")
}

func init() { proto.RegisterFile("globals.proto", fileDescriptor_b61bc6eb45b21f34) }

var fileDescriptor_b61bc6eb45b21f34 = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x41, 0x6f, 0x13, 0x31,
	0x10, 0x85, 0x95, 0x2c, 0x09, 0xc9, 0xa0, 0x28, 0xad, 0xa9, 0x50, 0x14, 0x71, 0xb0, 0x72, 0xaa,
	0xa2, 0x66, 0xb7, 0x34, 0x3d, 0x45, 0x42, 0x22, 0x2d, 0x02, 0x84, 0x10, 0xa0, 0x2d, 0xa7, 0x72,
	0x40, 0x8e, 0x77, 0xb2, 0x76, 0xc8, 0xda, 0x2b, 0x8f, 0xb7, 0x01, 0x7e, 0x05, 0x8a, 0xf8, 0xc1,
	0x28, 0xde, 0x44, 0x3d, 0xe4, 0xf6, 0xde, 0x78, 0xde, 0x37, 0xf6, 0xc8, 0xd0, 0xcb, 0xd7, 0x76,
	0x21, 0xd6, 0x14, 0x97, 0xce, 0x7a, 0xcb, 0x22, 0x51, 0xea, 0xe1, 0x45, 0xd0, 0x72, 0x92, 0xa3,
	0x99, 0xd0, 0x46, 0xe4, 0x39, 0xba, 0xc4, 0x96, 0x5e, 0x5b, 0x43, 0x89, 0x30, 0xc6, 0x7a, 0x11,
	0x74, 0x1d, 0x19, 0x7d, 0x87, 0xf6, 0x9d, 0x17, 0xbe, 0x22, 0x76, 0x06, 0x2d, 0x74, 0xce, 0xba,
	0x41, 0x83, 0x37, 0xce, 0xbb, 0x69, 0x6d, 0x18, 0x83, 0x27, 0xd2, 0x66, 0x38, 0x68, 0xf2, 0xc6,
	0x79, 0x2b, 0x0d, 0x9a, 0x0d, 0xe0, 0x69, 0x81, 0x44, 0x22, 0xc7, 0x41, 0x14, 0x7a, 0x0f, 0x76,
	0xd6, 0xdb, 0xce, 0x01, 0x3a, 0xe3, 0x3d, 0x72, 0xf4, 0x09, 0xda, 0x5f, 0x45, 0xae, 0x4d, 0xbe,
	0x83, 0xaf, 0x75, 0xa1, 0x7d, 0x80, 0xb7, 0xd2, 0xda, 0xb0, 0x17, 0xd0, 0xb6, 0xcb, 0x25, 0xa1,
	0xdf, 0xe3, 0xf7, 0x6e, 0x76, 0xb6, 0x9d, 0x9f, 0x42, 0x7f, 0xdc, 0xab, 0xc3, 0x5f, 0xea, 0xcb,
	0xdf, 0xfc, 0x8b, 0xb6, 0xf3, 0xbf, 0x11, 0xdb, 0x40, 0xff, 0xf3, 0xbb, 0x5b, 0x7e, 0x2b, 0x48,
	0xf1, 0xbb, 0xdf, 0xe4, 0xb1, 0x18, 0xfd, 0x80, 0xd3, 0x8f, 0x56, 0x09, 0x63, 0x90, 0xf8, 0x07,
	0xd4, 0xc5, 0x42, 0x48, 0xc5, 0x2e, 0x94, 0xf7, 0x25, 0xcd, 0x92, 0x24, 0xd7, 0x5e, 0x55, 0x8b,
	0x58, 0xda, 0x22, 0x59, 0xa9, 0xfd, 0x69, 0x62, 0x96, 0x72, 0x22, 0x05, 0xa9, 0x09, 0x05, 0xc4,
	0xf0, 0xa5, 0x59, 0xca, 0x9d, 0xaf, 0xed, 0x9b, 0x02, 0x33, 0x8d, 0x86, 0xbc, 0x58, 0xfb, 0x38,
	0xc3, 0xab, 0xe8, 0x55, 0x7c, 0x39, 0x3c, 0x39, 0x64, 0x62, 0x7c, 0x58, 0x95, 0x71, 0x86, 0xe3,
	0x46, 0xf3, 0xea, 0x44, 0x94, 0xe5, 0x5a, 0xcb, 0xb0, 0xd3, 0x64, 0x45, 0xd6, 0xcc, 0x8e, 0x2a,
	0xa9, 0x80, 0xe8, 0xfa, 0x72, 0xca, 0xee, 0xe1, 0x7d, 0x8a, 0xbe, 0x72, 0x06, 0x33, 0xbe, 0x51,
	0x68, 0xb8, 0x57, 0xc8, 0x2b, 0x42, 0xc7, 0x33, 0x8b, 0xc4, 0x8d, 0xf5, 0x5c, 0x89, 0x07, 0xe4,
	0x25, 0xba, 0x42, 0x13, 0x69, 0x6b, 0xb8, 0xb7, 0x5c, 0x48, 0x89, 0x44, 0xa1, 0xd7, 0x21, 0xd9,
	0xca, 0x49, 0x8c, 0x59, 0x1f, 0x7a, 0xc3, 0x67, 0xb1, 0x28, 0x75, 0x5c, 0x6f, 0x3a, 0x7d, 0xbb,
	0x1b, 0x71, 0xcd, 0x5e, 0xc3, 0xf8, 0x78, 0xc4, 0x21, 0xf6, 0x38, 0x06, 0x7f, 0x69, 0xf2, 0xc7,
	0x94, 0xfb, 0x29, 0xf4, 0xa1, 0x7b, 0x23, 0x48, 0xcb, 0x79, 0xe5, 0x15, 0x6b, 0x76, 0x1a, 0xc0,
	0xa1, 0xfb, 0xcd, 0xfe, 0x44, 0x13, 0x0a, 0xcf, 0x3b, 0xcd, 0x61, 0x6f, 0xa7, 0xac, 0xd3, 0x7f,
	0xc2, 0x03, 0x79, 0x73, 0xd1, 0x0e, 0x1f, 0x69, 0xfa, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x4b,
	0xaa, 0x78, 0x8c, 0x02, 0x00, 0x00,
}
